# Copyright 2012 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.


:start ::= rules
rules ::= rule+ action => do_rules
rule ::= start_rule | empty_rule | priority_rule | quantified_rule | comment_rule
start_rule ::= ':start' op_declare symbol_name
  action => do_start_rule
priority_rule ::= lhs op_declare priorities
  action => do_priority_rule
empty_rule ::= lhs op_declare adverb_list
  action => do_empty_rule
quantified_rule ::= lhs op_declare single_symbol quantifier adverb_list
    action => do_quantified_rule
comment_rule ::= ':comment' '~' single_symbol
  action => do_comment_rule
op_declare ::= 
      '::=' action => do_op_declare_bnf
    | '~' action => do_op_declare_match
priorities ::= alternatives+
    separator => op_tighter proper => 1
    action => do_discard_separators
op_tighter ~ '||'
alternatives ::= alternative+
    separator => op_eq_pri proper => 1
    action => do_discard_separators
op_eq_pri ~ '|'
alternative ::= rhs adverb_list action => do_alternative 
adverb_list ::= adverb_item* action => do_adverb_list
adverb_item ::=
      action
    | left_association | right_association | group_association
    | separator_specification | proper_specification

action ::= 'action' '=>' action_name action => do_action
left_association ::= 'assoc' '=>' 'left'
  action => do_left_association 
right_association ::= 'assoc' '=>' 'right'
  action => do_right_association 
group_association ::= 'assoc' '=>' 'group'
  action => do_group_association 

separator_specification ::= 'separator' '=>' single_symbol
  action => do_separator_specification
proper_specification ::= 'proper' '=>' boolean
  action => do_proper_specification

quantifier ::=
    '*' action => do_op_star_quantifier
  | '+' action => do_op_plus_quantifier

lhs ::= symbol_name action => do_lhs 
rhs ::= rhs_primary+ action => do_rhs
rhs_primary ::= single_symbol action => do_symbol_list
rhs_primary ::= ':ws*' action => do_ws_star
rhs_primary ::= ':ws+' action => do_ws_plus
rhs_primary ::= ':ws' action => do_ws
rhs_primary ::= ':any' action => do_any
rhs_primary ::= ':$' action => do_end_of_input
rhs_primary ::= single_quoted_string action => do_single_quoted_string
rhs_primary ::= '(' rhs_primary_list ')'
  action => do_parenthesized_symbol_list

rhs_primary_list ::= rhs_primary+ action => do_symbol_list
single_symbol ::=
    symbol
  | character_class action => do_character_class
symbol ::= symbol_name action => do_symbol
symbol_name ::= bare_name | reserved_word
symbol_name ::= '<' phrase_name '>' action => do_symbol
action_name ::= bare_name | '::whatever' | '::undef'

boolean ~ [\d+]+ action => do_literal
bare_name ~ [\w]+ action => do_literal

# phrase name can contain spaces
phrase_name ~ [ \w]+ action => do_literal

# In single quotes strings and character classes
# no escaping or internal newlines, and disallow empty string

single_quoted_string ~ ['] <string without single quote or vertical space> ['] action => do_literal
<string without single quote or vertical space> ~ [^'\x{0A}\x{0B}\x{0C}\x{0D}\x{0085}\x{2028}\x{2029}]+

<character class> ~ '[' <cc string> ']' action => do_literal
<cc string> ~ <cc character>
<cc character> ~ <escaped cc char> | <safe cc char>
<escaped cc character> ~ '\' <horizontal character>
# hex 5d is right square bracket
<safe cc character> ~ [^\x{5d}\x{0A}\x{0B}\x{0C}\x{0D}\x{0085}\x{2028}\x{2029}]

:comment ~ <hash comment>
<hash comment> ~ '#' <hash comment body> <hash comment end>
<hash comment body> ~ <horizontal character>*
<hash comment end> ~ :$ | <vertical space char>
<vertical space char> ~ [\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]

# a horizontal character is any character that is not vertical space
<horizontal character> ~ [^\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]
