#!/usr/bin/perl
# Copyright 2013 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

use 5.010;
use strict;
use warnings;
use English qw( -no_match_vars );
use Data::Dumper;
use Carp;
use Scalar::Util qw(blessed reftype);

# This is a 'meta' tool, so I relax some of the
# restrictions I use to guarantee portability.
use autodie;

# I expect to be run from a subdirectory in the
# development heirarchy
use lib '../../../';
use lib '../../../../blib/arch';
use Marpa::R2;
BEGIN { require './MetaAST.pm'; }

use Getopt::Long;
my $verbose          = 1;
my $help_flag        = 0;
my $scannerless_flag = 1;
my $result           = Getopt::Long::GetOptions( 'help' => \$help_flag, );
die "usage $PROGRAM_NAME [--help] file ...\n" if $help_flag;

package Marpa::R2::Internal::MetaAST;
our $META_AST;
BEGIN { $META_AST = __PACKAGE__; }
package main;

my $bnf = do { local $RS = undef; \(<>) };
my $ast_ref = Marpa::R2::Internal::MetaAST->new($bnf);

my $parse_result = bless {
    p_source => $bnf,
    g0_rules => [],
    g1_rules => []
}, $META_AST;

# say "Original AST = \n", Data::Dumper::Dumper($ast_ref);
my $ast = dwim_evaluate( ${$ast_ref}, $parse_result );

# say STDERR "self object = \n", Data::Dumper::Dumper($parse_result);

sub dwim_evaluate {
    my ( $value, $parse ) = @_;
    return $value if not defined $value;
    if ( Scalar::Util::blessed($value) ) {
        return $value->evaluate($parse) if $value->can('evaluate');
        return bless [ map { dwim_evaluate( $_, $parse ) } @{$value} ],
            ref $value
            if Scalar::Util::reftype($value) eq 'ARRAY';
        return $value;
    } ## end if ( Scalar::Util::blessed($value) )
    return [ map { dwim_evaluate( $_, $parse ) } @{$value} ]
        if ref $value eq 'ARRAY';
    return $value;
} ## end sub dwim_evaluate

sub sort_bnf {
    my $cmp = $a->{lhs} cmp $b->{lhs};
    return $cmp if $cmp;
    my $a_rhs_length = scalar @{ $a->{rhs} };
    my $b_rhs_length = scalar @{ $b->{rhs} };
    $cmp = $a_rhs_length <=> $b_rhs_length;
    return $cmp if $cmp;
    for my $ix ( 0 .. ( $a_rhs_length - 1 ) ) {
        $cmp = $a->{rhs}->[$ix] cmp $b->{rhs}->[$ix];
        return $cmp if $cmp;
    }
    return 0;
} ## end sub sort_bnf

my %stripped_character_classes = ();
{
    my $character_classes = $parse_result->{character_classes};
    for my $symbol_name ( sort keys %{$character_classes} ) {
        my ($re) = @{ $character_classes->{$symbol_name} };
        $stripped_character_classes{$symbol_name} = $re;
    }
}

my %cooked_parse_result = (
    is_lexeme         => $parse_result->{is_lexeme},
    character_classes => \%stripped_character_classes
);

for my $rule_set (qw(g0_rules g1_rules)) {
    my $aoh        = $parse_result->{$rule_set};
    my $sorted_aoh = [ sort sort_bnf @{$aoh} ];
    $cooked_parse_result{$rule_set} = $sorted_aoh;
}

say "## The code after this line was automatically generated by ",
    $PROGRAM_NAME;
say "## Date: ", scalar localtime();
$Data::Dumper::Sortkeys = 1;
print Data::Dumper->Dump( [ \%cooked_parse_result ], [qw(hashed_metag)] );
say "## The code before this line was automatically generated by ",
    $PROGRAM_NAME;

exit 0;

# Given a scanless recognizer and
# and the start and end positions, return the input string
sub positions_to_string {
    my ( $parse, $start_position, $end_position ) = @_;
    return substr ${ $parse->{p_source} }, $start_position,
        ( $end_position - $start_position );
}

