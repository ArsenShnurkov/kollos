# Copyright 2013 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

=head1 Name

Marpa::R2::ASF - Marpa's abstract syntax forests (ASF's)

=head1 Synopsis

With the grammar,

=for Marpa::R2::Display
name: ASF synopsis grammar
normalize-whitespace: 1
remove-display-indent: 1
remove-blank-last-line: 1

  :default ::= action => [values] bless => ::lhs
  lexeme default = action => [value] bless => ::name

  S   ::= NP  VP  period  bless => S

  NP  ::= NN              bless => NP
      |   NNS          bless => NP
      |   DT  NN          bless => NP
      |   NN  NNS         bless => NP
      |   NNS CC NNS  bless => NP

  VP  ::= VBZ NP          bless => VP
      | VP VBZ NNS        bless => VP
      | VP CC VP bless => VP
      | VP VP CC VP bless => VP
      | VBZ bless => VP

  period ~ '.'

  :discard ~ whitespace
  whitespace ~ [\s]+

  CC ~ 'and'
  DT  ~ 'a' | 'an'
  NN  ~ 'panda'
  NNS  ~ 'shoots' | 'leaves'
  VBZ ~ 'eats' | 'shoots' | 'leaves'

=for Marpa::R2::Display::End

and the input,

=for Marpa::R2::Display
name: ASF synopsis input
normalize-whitespace: 1

  my $sentence = 'a panda eats shoots and leaves.';

=for Marpa::R2::Display::End

we can create use an ASF to diagram it in Penntag form:

=for Marpa::R2::Display
name: ASF synopsis output
partial: 1
remove-display-indent: 1
remove-blank-last-line: 1

  (S (NP (DT a) (NN panda))
     (VP (VBZ eats) (NP (NNS shoots) (CC and) (NNS leaves)))
     (. .))
  (S (NP (DT a) (NN panda))
     (VP (VP (VBZ eats) (NP (NNS shoots))) (CC and) (VP (VBZ leaves)))
     (. .))
  (S (NP (DT a) (NN panda))
     (VP (VP (VBZ eats)) (VP (VBZ shoots)) (CC and) (VP (VBZ leaves)))
     (. .))

=for Marpa::R2::Display::End

Here's the code:

=for Marpa::R2::Display
name: ASF synopsis code
normalize-whitespace: 1

  my $panda_grammar = Marpa::R2::Scanless::G->new( { source => \$dsl } );
  my $panda_recce = Marpa::R2::Scanless::R->new( { grammar => $panda_grammar } );
  $panda_recce->read( \$sentence );
  my $asf = Marpa::R2::ASF->new( { slr=>$panda_recce } );
  my $raw_actual = $asf->traverse(
      sub {
	  # This routine converts the glade into a list of Penn-tagged elements.  It is called recursively.
	  my ($glade)     = @_;
	  my $rule_id     = $glade->rule_id();
	  my $symbol_id   = $glade->symbol_id();
	  my $symbol_name = $panda_grammar->symbol_name($symbol_id);

	  # A token is a single choice, and we know enough to fully Penn-tag it
	  if ( not defined $rule_id ) {
	      my $literal = $glade->literal();
	      my $symbol_description =
		  $symbol_name eq 'period' ? q{.} : $symbol_name;
	      return ["($symbol_description $literal)"];
	  } ## end if ( not defined $rule_id )

	  # Our result will be a list of choices
	  my @return_value = ();

	  CHOICE: while (1) {

	      # The results at each position are a list of choices, so
	      # to produce a new result list, we need to take a Cartesian
	      # product of all the choices
	      my $length = $glade->rh_length();
	      my @results = ( [] );
	      for my $rh_ix ( 0 .. $length - 1 ) {
		  my @new_results = ();
		  for my $old_result (@results) {
		      for my $new_value ( @{ $glade->rh_value($rh_ix) } ) {
			  push @new_results, [ @{$old_result}, $new_value ];
		      }
		  }
		  @results = @new_results;
	      } ## end for my $rh_ix ( 0 .. $length - 1 )

	      # Special case for the start rule
	      if ( $symbol_name eq '[:start]' ) {
		  return [ map { join q{}, @{$_} } @results ];
	      }

	      # Now we a list of choices, as a list of lists.  Each sub list
	      # is a list of Penn-tagged elements, which we need to join into
	      # a single Penn-tagged element.  The result will be to collapse
	      # one level of lists, and leave us with a list of Penn-tagged
	      # elements
	      my $join_ws = q{ };
	      $join_ws = qq{\n   } if $symbol_name eq 'S';
	      push @return_value,
		  map { "($symbol_name " . ( join $join_ws, @{$_} ) . ')' }
		  @results;

	      # Look at the next alternative in this glade, or end the
	      # loop if there is none
	      last CHOICE if not defined $glade->next();

	  } ## end CHOICE: while (1)

	  # Return the list of Penn-tagged elements for this glade
	  return \@return_value;
	  }
);

=for Marpa::R2::Display::End


=head1 THIS INTERFACE is ALPHA and EXPERIMENTAL

The interface described in this document is very much a work in progress.
It is alpha and experimental.
The bad side of this is that it is subject to change from version to
version in major ways,
rapidly and without notice.
The good side is that field is 100% open for users
to have feedback into the final interface.

=head1 About this document

This document describes the abstract syntax forests (ASFs) of
Marpa's SLIF interface.
An ASF is an efficient and practical way to represent multiple abstract syntax trees (AST's).

=head1 Constructor

=head2 new()

=for Marpa::R2::Display
name: ASF low-level calls synopsis, code part 1
normalize-whitespace: 1
partial: 1

  my $asf = Marpa::R2::ASF->new( { slr => $slr } );
  die 'No ASF' if not defined $asf;

=for Marpa::R2::Display::End

Creates a new ASF object.
Must be called with a list of one or more hashes of named arguments.
Current only one named argument is allowed, the C<slr> argument, and
that argument is required.
The value of the C<slr> argument must be a SLIF recognizer object.

Returns the new ASF object, or undef if there was a problem.

=head1 Accessor

=head2 grammar()

=for Marpa::R2::Display
name: ASF low-level calls synopsis, code part 2
normalize-whitespace: 1
partial: 1

    my $grammar     = $asf->grammar();

=for Marpa::R2::Display::End

Returns the SLIF grammar associated with the ASF.
This can be convenient when using SLIF grammar methods
while examining an ASF.
All failures are thrown as exceptions.

=head1 Mutator

=head2 traverse()

=head1 Traversal accessors

These are the methods that must be called in the context of a traversal routine.

=head2 literal()

=head2 span()

=head2 symbol_id()

=head2 rule_id()

=head2 rh_length()

=head2 rh_value()

=head2 next()

=head1 Copyright and License

=for Marpa::R2::Display
ignore: 1

  Copyright 2013 Jeffrey Kegler
  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  Marpa::R2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::R2.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::R2::Display::End

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
