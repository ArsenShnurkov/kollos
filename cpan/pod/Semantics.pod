# Copyright 2013 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

=head1 NAME

Marpa::R2::Semantics - How Marpa evaluates parses

=head1 Synopsis

=for Marpa::R2::Display
name: SLIF full synopsis
normalize-whitespace: 1

    use Marpa::R2;

    my $grammar = Marpa::R2::Scanless::G->new(
        {   bless_package => 'My_Nodes',
            source        => \(<<'END_OF_SOURCE'),
    :default ::= action => [values] bless => ::lhs
    lexeme default = action => [start,length,value] bless => ::name

    :start ::= Script
    Script ::= Expression+ separator => comma
    comma ~ [,]
    Expression ::=
        Number bless => primary
        | '(' Expression ')' bless => paren assoc => group
       || Expression '**' Expression bless => exponentiate assoc => right
       || Expression '*' Expression bless => multiply
        | Expression '/' Expression bless => divide
       || Expression '+' Expression bless => add
        | Expression '-' Expression bless => subtract

    Number ~ [\d]+
    :discard ~ whitespace
    whitespace ~ [\s]+
    # allow comments
    :discard ~ <hash comment>
    <hash comment> ~ <terminated hash comment> | <unterminated
       final hash comment>
    <terminated hash comment> ~ '#' <hash comment body> <vertical space char>
    <unterminated final hash comment> ~ '#' <hash comment body>
    <hash comment body> ~ <hash comment char>*
    <vertical space char> ~ [\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]
    <hash comment char> ~ [^\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]
    END_OF_SOURCE
        }
    );


    my $recce = Marpa::R2::Scanless::R->new( { grammar => $grammar } );

    my $input = '42*2+7/3, 42*(2+7)/3, 2**7-3, 2**(7-3)';
    $recce->read(\$input);
    my $value_ref = $recce->value();
    die "No parse was found\n" if not defined $value_ref;

    # Result will be something like "86.33... 126 125 16"
    # depending on the floating point precision
    my $result = ${$value_ref}->doit();

    package My_Nodes;

    sub My_Nodes::primary::doit { return $_[0]->[0]->doit() }
    sub My_Nodes::Number::doit  { return $_[0]->[2] }
    sub My_Nodes::paren::doit   { my ($self) = @_; $self->[1]->doit() }

    sub My_Nodes::add::doit {
        my ($self) = @_;
        $self->[0]->doit() + $self->[2]->doit();
    }

    sub My_Nodes::subtract::doit {
        my ($self) = @_;
        $self->[0]->doit() - $self->[2]->doit();
    }

    sub My_Nodes::multiply::doit {
        my ($self) = @_;
        $self->[0]->doit() * $self->[2]->doit();
    }

    sub My_Nodes::divide::doit {
        my ($self) = @_;
        $self->[0]->doit() / $self->[2]->doit();
    }

    sub My_Nodes::exponentiate::doit {
        my ($self) = @_;
        $self->[0]->doit()**$self->[2]->doit();
    }

    sub My_Nodes::Script::doit {
        my ($self) = @_;
        return join q{ }, map { $_->doit() } @{$self};
    }

=for Marpa::R2::Display::End

=head1 About this document

B<This document is under construction.>
It is being converted to describe Marpa's primary interface, the SLIF.
Currently,
much of it actually describes an older and more low-level Marpa interface, the NAIF.

=head1 What is semantics?

A parser is something that takes a string of symbols (tokens or characters) and finds a structure
in it.
Traditionally, that structure is a tree.

Rarely is an application interested only in the tree.
Usually the idea is that the string "means" something --
the idea is that the string has a B<semantics>.
Traditionally and most often, the tree
is as an intermediate step in producing a value,
a value which represents the "meaning" or "semantics" of the string.

"Evaluating" a tree means finding its semantics.
The rest of this document describes Marpa's methods for evaluating trees.
Those of you who have dealt with other traditional parsers, such as yacc and bison,
will find Marpa's approach familiar.

Evaluation only takes place within the structural (G1) subgrammar,
and the descriptions of the behaviors of rules and lexemes applies only
to the G1 subgrammar.
G0 rules and terminal symbols do not become nodes
in the parse tree,
they have no actions,
and they are never evaluated.

=head1 Nodes

In a parse tree, nodes are points where the tree branches or terminates.
Tree terminations are also called terminals or "leaves".

Every rule instance in a Marpa parse is reprsented by a branch point (or "node")
in the tree.
The topmost node of a tree is its "root node".
(Trees are easiest to draw upside down, so traditionally in programming,
the top of a tree is its root.)

A node, or branch point, "branches" into zero or more "child nodes".
The node just above a child node,
the one from which the child node branches out,
is called its parent node.

If the node is for a BNF rule,
the parent node is the LHS of the rule,
and the child nodes are the RHS of the rule.
If the node is for a sequence rule,
the parent node is the LHS of the sequence rule,
and the child nodes are the items of the sequence.
If the node is for a lexeme,
the node represents the lexeme's symbol
and there will be no child nodes.

A parent node can have zero or more children.
Rules with zero children are nulled rules,
and are "leaf nodes" or terminals.
In Marpa's parse trees, every leaf node is either
a lexeme or a nulled rule.

=head1 The order of node evaluation

The nodes of a Marpa parse tree are
evaluated recursively, left-to-right and bottom-up.
This means that,
when a parent node is evaluated,
the values of all child nodes are known
and available for use by the semantics.
The final value of a parse is the value of the top node
of the parse tree.

=head1  Parse trees and parse series

Because Marpa allows ambiguous parsing,
each parse can produce a B<parse series> --
a series of zero or more parse trees,
each with its own parse result.
The first call to the
L<the recognizer's C<value>
method|Marpa::R2::NAIF::Recognizer/"value">
after the recognizer is created is the
start of the first parse series,
a Parse Series Setup Phase takes place
at this point.

The first parse series continues until there is
a call to the
L<the C<reset_evaluation>
method|Marpa::R2::NAIF::Recognizer/"reset_evaluation">
or until the recognizer is destroyed.
Almost always, an application is only interested in one
parse series.

The Parse Series Setup Phase, just mentioned,
is one of several phases in which the semantics are executed.
This document will not detail these, because
most applications will find that the order in which
these phases occurs "just works".
But the detail can matter for some applications.
Applications which might depend on these details
include those which make unusual use of side effects in the semantics;
and those which alter their symbol tables at runtime.
L<A separate
document|Marpa::R2::Semantics::Phases>
describes that semantics phases.
in detail.

=head1 Nulled subtrees

A nulled subtree is the tree formed by a nulled node and its direct and
indirect child nodes.
(All these child nodes will also be nulled nodes.)
Before evaluation,
Marpa prunes all nulled subtrees back to their topmost nulled
node.
Of all the ways of dealing with nulled subtrees, this is the
simplest and
Marpa's users have found it a natural approach.
More detail on the semantics of nulled symbols and subtrees
can be found in
L<a separate document|Marpa::R2::Semantics::Null>.

=head1 Actions and how Marpa finds them

What the SLIF does at each node is called that node's B<action>.
Actions can be explicit or implicit.
An explicit action is one that is specified in one of the ways
to be described below.
A node's implicit action is the one it performs if it has no
explicit action.

=head2 Lexeme actions

The implicit action for a lexeme is to return
its literal value in the input stream, as a string.
An explicit default may be set using the
L<the lexeme default statement|Marpa::R2::Scanless::DSL/"Lexeme default statement">.

=head2 Rule actions

The implicit action for a rule is to return a Perl C<undef>.
An explicit action for a rule can be specified using
L<the C<action> adverb|Marpa::R2::Scanless::DSL/"action">
for the rule or, in the case of a prioritized rule, the RHS alternative.
A default explicit action for rules can be specified with a
L<default pseudo-rule|Marpa::R2::Scanless::DSL/"Default pseudo-rules">.

=head2 Nulled symbol actions

As mentioned, nulled subtrees are pruned back to their topmost symbol.
Lexemes are never nulled, so this symbol is always the LHS of a rule,
and the action is determined from the rule,
as L<just described|/"Rule actions">.

A complication arises if the symbol appears on the LHS of more than one
nullable rule.  Because the symbol is nulled, the input is no help in determining
which rule to use.  The rule whose semantics are used for a nulled symbol
is determined as follows:

=over 4

=item * If there is only one nulled rule, its semantics are used.

=item * If all nulled rule have the same semantics, that semantics is used.

=item * If one of the nulled rules is a empty rule (a rule with zero RHS symbols),
then the empty rule's semantics are used.

=item * 
The remaining case is that of
a set of nullable rules with the same LHS,
where two or more of the rules have different action names,
but none of the rules in the set is an empty rule.
When this happens, Marpa throws an exception.
To fix the issue,
the user can add an empty rule.

=back

In determining whether the semantics of two nulled rules
are "the same",
blessing is taken into account.
Two rules are considered to have different semantics if
they are blessed differently.
For more details,
see L<the document on
null semantics|Marpa::R2::Semantics::Null>.

=head1 Explicit actions

There are four kinds of explicit action name:

=over 4

=item * Array descriptors

=item * Reserved action names

=item * Perl identifiers

=item * Perl names

=back

These are detailed in the sections that follow.

=head1 Array descriptor actions

=for Marpa::R2::Display
name: SLIF DSL synopsis
partial: 1
normalize-whitespace: 1

    lexeme default = action => [start,length,value] bless => ::name

=for Marpa::R2::Display::End

If an action is enclosed in square brackets, it is an B<array descriptor>,
and the value of the lexeme or rule will be an array.
Inside the array descriptor should a comma separated list of zero or more array
descriptor items.
The B<array descriptor items> are keywords that describe how the array is to be filled
out.

If the array descriptor is an empty pair of square brackets ("C<[]>"),
then there are zero array descriptor items,
and the value will be an empty array.
Otherwise the "array descriptor item" keywords are interpreted as lists
and those lists are used to fill out the 
array.

=over 4

=item C<length>

The C<length> array descriptor item will put
the length of the rule or lexeme into the array.
Length is in characters
and is defined such that the end location
is always start location plus length.

=item C<start>

A C<start> array descriptor item will put
the start location of the rule or lexeme into the array.
The start location is an offset in the input string.

=item C<value>

For a rule,
the C<value> array descriptor item indicates a list containing
the values of
the rule's children, in left-to-right order.
For a lexeme, 
the C<value> array descriptor item indicates a list
containing a single element,
the token value of the lexeme.

=item C<values>

The C<value> and C<values> array descriptor items are synonyms,
and may be used interchangeably for both rules and lexemes.

=back

=head2 Example

The array descriptor item keywords fill out the array in
the order in which they appear in the the array descriptor.
For example, if we are dealing with a rule,
and the array descriptor is "C<[start,length,value]>",
then the return value is an reference to an array,
whose length will vary, but which will be contain least
three elements.
The first element will be the start location in the
input string of this rule instance,
and the second will be its length.
The remaining elements will be
the values of the rule's RHS children,
in lexical order,
as computed according to the semantics
of those children.

=head1 Reserved action names

If the action value begins with a double colon ("C<::>"),
it is a reserved action.
The following are recognized:

=over 4

=item * C<::array>

The value of the rule or lexeme is an array.
For a rule, the array will
contain the
values of each of its children, in left-to-right order.
If the rule has no children, the array will be empty.
For a lexeme, the array will be of length one,
and will contain the token value.

C<::array> is equivalent to C<[values]>.
This means that, for both lexemes and rules,
the actions C<[values]>, C<[value]> and C<::array>
will do exactly the same thing.

=item * C<::first>

The value of the rule is that of the rule's first child.
If there is no such child, the value is a Perl C<undef>.

It is a fatal error if a blessing
is applied to a rule with a C<::first> action.
This is the case even when either or both adverbs are
the result of a default.
It is also a fatal error to use a C<::first> action
with a lexeme.

=item * C<::undef>

The value of the rule or lexeme is 
a Perl C<undef>.
It is a fatal error if a blessing
is applied to a rule with a C<::undef> action.
This is the case even when either or both adverbs are
the result of a default.

=back

=head1 Perl identifers

If the action value is a Perl identifier,
it is treated as the name of a Perl variable,
but one which still must be fully qualified by adding a package name.
For this purpose, a Perl identifier is a sequence of one or more alphanumerics
and underscores.
Perl identifiers must be resolved to Perl names,
as L<described below|/"Resolving Perl identifiers to Perl names">.

=head1 Perl names as actions

For this purpose, a Perl name is
is a series of two or more Perl identifiers
separated by double colons ("C<::>").
Note that, by this definition, a Perl name cannot start with a double colon.
Action names starting with double colons
are always treated as a reserved
action names.

Action names which are Perl names by this definition are
treated as they were fully qualified Perl names.
Fully qualified Perl names are resolved to variables in Perl's namespace,
L<as described below|/"Resolving Perl names to Perl variables">.

=head1 The semantics package

To resolve Perl identifiers to Perl names,
a semantics package must be defined.
The semantics package can be defined using the
L<SLIF recognizer's C<semantics_package> named
argument|Marpa::R2::Scanless:R/"semantics_package">,
or it can be taken from the argument to the first C<value()>
call of the parse series.
The C<semantics_package> named argument takes precedence.

If the arguments to the C<value()> method are used to specify
the semantics package, within a parse series they must consistently
specify the same package.
For details see the description of
L<SLIF recognizer's C<value()>
method|Marpa::R2::Scanless:R/"value()">.

If the user wants the Perl variables implementing the semantics
in the C<main> namespace,
she can specify
C<"main">
as the semantics package.
But it is usually good practice to keep
Perl variables intended for use by Marpa's semantics
in their own namespace,
especially if the application is not small.

=head1 Resolving Perl identifiers to Perl names

For example, if the action value
is "C<some_var>", the action value will be regarded as a Perl identifer.
If the semantics package is "C<My_Actions>", Marpa will convert the action
value to "C<My_Actions::some_var>", and hand
it on for processing as a fully qualified Perl name.
For an Perl identifier to resolve successfully
to a Perl name,
a semantics package must be defined.

=head1 Resolving Perl names to Perl variables

Once Marpa has a fully qualified Perl name, it looks in Perl's symbol tables for
a Perl variable with that name,
either the name of a subroutine, or of a scalar.
It is important to note that for the purposes of Perl's symbol tables,
and therefore for the purposes of Marpa's resolution of Perl names,
references are scalars.

If Marpa finds a Perl subroutine with that fully qualified Perl name,
the action name is resolved to that subroutine,
which then becomes a B<rule evaluation closure>.
If Marpa does not find
a Perl subroutine with that name,
but does find a scalar Perl variable with that name,
the action name is resolved to that Perl variable.
(Again, for this purpose a Perl reference is a kind of Perl scalar.)

Note that the above implies that resolution can be either to a Perl subroutine
or to a reference to a Perl subroutine, but that the result will be very different.
The Perl subroutine will be treated as a rule evaluation closure, and executed to produce
the value of the node.
The reference to a subroutine will B<NOT> be treated as a rule evaluation closure,
and will not be executed.
The reference to a Perl subtroutine will be passed on, as is, as the value of the node.

=head1 Executing rule evaluation closures

A rule evaluation closure action is always called in scalar context,
and its return value will be used as the value of its node.
The first argument of a rule evaluation closure is always the per-parse argument.
Subsequent arguments contain the child values, as follows:

=over 4

=item *

If the rule is not nulled and is not blessed,
the second and subsequent arguments are the child values in order.

=item *

If the rule is nulled, there will be only one argument:
the, first, per-parse argument.

=item *

If according to the semantics, the rule is blessed and
is not nulled,
the closure will always have exactly two arguments.
The first will be the per-parse argument,
and the second will be a blessed array that contains
the child values in input-stream order.
(This grouping of child values into an array
is required in order to allow the blessing to stay in effect.)

=back

=head1 Quanitifed rule nodes

Everything just said about rule nodes
applies to nodes for
L<quantified
rules|Marpa::R2::Scanless::DSL/"Quanitifed rules">.
But there is a difference between quantified rules
and others, and it a big one if you are writing a rule
evaluation closure.

In other rules, the right hand side
is fixed in length,
and therefore the number of child nodes is known in advance.
This is not the case with a quantified rule.
The rule evaluation closure
for a quantified rule
must be capable of
dealing with
a variable number of arguments.

=head1 Action context

=for Marpa::R2::Display
name: SLIF action context synopsis
normalize-whitespace: 1

    sub do_S {
        my ($action_object) = @_;
        my $rule_id         = $Marpa::R2::Context::rule;
        my $grammar         = $Marpa::R2::Context::grammar;
        my ( $lhs, @rhs ) = $grammar->rule($rule_id);
        $action_object->{text} =
              "rule $rule_id: $lhs ::= "
            . ( join q{ }, @rhs ) . "\n"
            . "locations: "
            . ( join q{-}, Marpa::R2::Context::location() ) . "\n";
        return $action_object;
    } ## end sub do_S

=for Marpa::R2::Display::End

In addition to the per-parse-tree variable
and their child arguments,
rule evaluation closures also have access
to B<context variables>.

=over

=item * C<$Marpa::R2::Context::grammar> is set to
the grammar being parsed.

=item * C<$Marpa::R2::Context::rule> is the ID of the
current rule.
Given the rule ID, an application can find
its LHS and RHS symbols using
L<the SLIF grammar's C<rule()> method|Marpa::R2::Scanless::G/"rule">.

=item * C<Marpa::R2::Context::location()> returns the start
and end locations of the current rule.

=back

=head1 Bailing out of parse evaluation

=for Marpa::R2::Display
name: SLIF bail synopsis
normalize-whitespace: 1

    my $bail_message = "This is a bail out message!";

    sub do_bail_with_message_if_A {
        my ($action_object, $terminal) = @_;
        Marpa::R2::Context::bail($bail_message) if $terminal eq 'A';
    }

    sub do_bail_with_object_if_A {
        my ($action_object, $terminal) = @_;
        Marpa::R2::Context::bail([$bail_message]) if $terminal eq 'A';
    }

=for Marpa::R2::Display::End

=head1 Modifying Perl variable actions

Assuming no trickery, such as use of Perl's C<local> keyword, takes place,
resolution to a Perl variable will always resolve to a single, global variable.
Any modification of this variable will be seen, at a minimum,
by other nodes of the current parse,
and by other parses.
All this suggests that,
as a matter of good practice,
use of Perl variable actions
be restricted to using them
as constants.
From one point of view,
this suggest the term "Perl constant actions" might be better,
but the fact is that they are variables and can be modified --
it's just that it's almost always a bad idea to do so.

For example,
assume that actions are in a package named C<My_Actions>,
which contains a hash reference named C<empty_hash>, 

=for Marpa::R2::Display
ignore: 1

        package My_Actions;
        our $empty_hash = {};

=for Marpa::R2::Display::End

It can be tempting, in building objects which are hashes,
to start with a left node whose action is C<empty_hash>
and to add contents to it as the object is passed up the evaluation
tree.
But C<$empty_hash> points to a single hash object.
This single hash object will shared by all nodes,
with all nodes seeing each other's changes.
Worse, all Marpa parsers which use the same C<My_Actions>
namespace will share the same hash object.
The best way to defined an
C<empty_hash> to
initialize an empty hash is with a rule
evaluation closure 
that returns C<{}>.

=for Marpa::R2::Display
ignore: 1

        sub My_Actions::empty_hash { return {}; }

=for Marpa::R2::Display::End

=head1 Visibility of Perl object actions

It is important to note that,
when Perl closures are used for the semantics,
they must be visible in the scope where the semantics are
B<resolved>.
The action names are usually B<specified> with the grammar,
but action B<resolution> takes place
in the recognizer's
L<C<value>|Marpa::R2::NAIF::Recognizer/"value">
and
L<C<reset_evaluation>|Marpa::R2::NAIF::Recognizer/"reset_evaluation">
methods.
This can sometimes be a source of confusion,
because if a Perl closure is visible when the
action is specified,
but goes out of scope before the action name is resolved,
resolution will fail.

=head1 The per-parse argument

The first argument of every rule evaluation closure is
the B<per-parse> argument.
This is taken from

=over 4

=item * The result of returned by per-parse constructor if there is one.

=item * Otherwise, the argument to the SLIF recognizer's C<value()> method, if there is one.

=item * If not otherwise specified, the per-parse argument is an empty hash.

=back

The per-parse argument is destroyed once the evaluation of the parse tree is finished.
Between creation and destruction, the per-parse argument is not touched by Marpa's internals --
it is reserved for use by the application.

The primary way of passing data while evaluating a parse tree is purely functional --
results from child nodes are passed up to parent nodes.
Applications can use
the per-parse argument for data which does not conveniently fit the functional model.
Symbol tables are
one common example of data that are best handled outside the functional model.

=head1 The per-parse constructor

The per-parse constructor is the C<new()> method of the semantics package.
If there is no semantics package, or if it has no C<new()> method,
there is no per-parse constructor.

The per-parse construct is called with one argument.
This argument is the argument of the
the SLIF recognizer's C<value()> method, if there one was defined.
Otherwise it is the name of the semantics package.

The result returned by the per-parse constructor becomes the per-parse argument.
The per-parse constructor is called
in the Tree Setup Phase.

=head1 Parse order

If a parse is ambiguous, all parses are returned,
with no duplication.
By default, the order is arbitrary, but
it is also possible to control the order.
Details are in L<the document
on parse order|Marpa::R2::Semantics::Order>.

=head1 Infinite loops

Grammars with infinite loops (cycles)
are generally regarded as useless in practical applications.
Due to lack of interest,
the SLIF does not currently support them,
altougth Libmarpa itself, Marpa's thin interface and the NAIF all do.
Those interested in knowing more can look at L<the
document on the NAIF's support of infinitely ambiguous
grammars|Marpa::R2::NAIF::Semantics::Infinite>.

=head1 Copyright and License

=for Marpa::R2::Display
ignore: 1

  Copyright 2013 Jeffrey Kegler
  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  Marpa::R2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::R2.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::R2::Display::End

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
