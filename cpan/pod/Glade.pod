# Copyright 2013 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

=head1 Name

Marpa::R2::Glade - Low-level interface to Marpa's ASF's

=head1 Synopsis

=for Marpa::R2::Display
name: ASF low-level calls synopsis, code part 1
normalize-whitespace: 1

  my $grammar = Marpa::R2::Scanless::G->new(
      {   source => \(<<'END_OF_SOURCE'),
  :start ::= pair
  pair ::= duple | item item
  duple ::= item item
  item ::= Hesperus | Phosphorus
  Hesperus ::= 'a'
  Phosphorus ::= 'a'
  END_OF_SOURCE
      }
  );

  my $slr = Marpa::R2::Scanless::R->new( { grammar => $grammar } );
  $slr->read( \'aa' );
  my $asf = Marpa::R2::ASF->new( { slr => $slr } );
  die 'No ASF' if not defined $asf;
  my $output_as_array = asf_to_basic_tree($asf);
  my $actual_output   = array_display($output_as_array);

=for Marpa::R2::Display::End

=for Marpa::R2::Display
name: ASF low-level calls synopsis, output
remove-display-indent: 1
remove-blank-last-line: 1

    Glade 2 has 2 symches
      Glade 2, Symch 0, pair ::= duple
        Glade 6, duple ::= item item
          Glade 8 has 2 symches
            Glade 8, Symch 0, item ::= Hesperus
              Glade 13, Hesperus ::= 'a'
                Glade 15, Symbol 'a': "a"
            Glade 8, Symch 1, item ::= Phosphorus
              Glade 1, Phosphorus ::= 'a'
                Glade 17, Symbol 'a': "a"
      Glade 2, Symch 1, pair ::= item item
    Glade 8 revisited

=for Marpa::R2::Display::End

=head1 THIS INTERFACE is ALPHA and EXPERIMENTAL

The interface described in this document is very much a work in progress.
It is alpha and experimental.
The bad side of this is that it is subject to change from version to
version in major ways,
rapidly and without notice.
The good side is that field is 100% open for users
to have feedback into the final interface.

=head1 About this document

This document describes the low-level interface to Marpa's abstract syntax forests (ASF's).
An abstract syntax forest, as the name suggests, is an abstract
syntax tree, generalized to contain the multiple trees that result from an
ambiguous parse.

This low-level interface allows the maximum flexiblity in building the forest,
but requires the application to do much of the work.
A higher-level interface is planned.

=head1 Getting around in a parse forest

An abstract syntax forest (ASF) is similar to an abstract syntax tree (AST), except that it
can represent an ambiguous parse.
An ASF is an efficient and practical way to represent multiple AST's.
In their structure,
ASF's have similarities to ordinary parse trees,
but there are very important differences:

=over 4

=item * First, traversing many forests of practical interest requires care if your time is not going to go
exponential.  This issue exists with trees to some extent, but it is much more severe with parse forests.

=item * Second, Marpa parses can not be relied on to be trees.  The underlying algorithm allows parses
to contain cycles and most likely this ability will come to the SLIF someday.

=item * Third, for a tree there are only two kinds of nodes: rules (interior nodes) and tokens (leaf nodes).
Forests also use nodes to represent the various kinds of ambiguity that a parse can encounter,
and this makes traversing a forest somewhat more complex.

=back

=head1 Ambiguity: factoring versus symches

Ambiguity in a parse can come in two forms, and Marpa's ASFs treat the
distinction as important.  An ambiguity can be a symbolic choice
(symch), or a factoring.  Symbolic choices are the kind of ambiguity
that springs first to mind -- a choice between rules, or a choice
between a rule and token.  Factorings occur when only one rule applies,
but it can divide the input in different ways.  I'll give examples below.

Symches are factorings behave very differently, and most applications
will want to treat them very differently.
Symches are less common, almost
always of great interest, and the number of alternatives is usually
small and has a (usually manageable) maximum size which depends on the
grammar,.  Factorings are more common, and the number of alternatives
can be exponential in the length of the input affected, and has no
maximum -- it can grow arbitrarily large with the length of the affected
section of the input.  On the other hand, factoring are sometimes of no
interest.
It is much more likely that an application will want to ignore some or all
of the ambiguity due to factoring,
than it is than an application will want to ignore ambiguity causes
by a symbol choice.

=head2 An example of a symch

Here's an example of a symch.  The grammar is:

=for Marpa::R2::Display
name: ASF symch dump example grammar
remove-display-indent: 1
remove-blank-last-line: 1

    :start ::= planet
    planet ::= hesperus
    planet ::= phosphorus
    hesperus ::= venus
    phosphorus ::= venus
    venus ~ 'venus'

=for Marpa::R2::Display::End

For the input string 'venus', the forest would look like

=for Marpa::R2::Display
name: ASF symch dump example output
remove-blank-last-line: 1
remove-display-indent: 1

    Symbol #0 planet has 2 symches
      Symch #0.0
      GL2 Rule 1: planet ::= hesperus
        GL3 Rule 3: hesperus ::= venus
          GL4 Symbol venus: "venus"
      Symch #0.1
      GL2 Rule 2: planet ::= phosphorus
        GL5 Rule 4: phosphorus ::= venus
          GL6 Symbol venus: "venus"

=for Marpa::R2::Display::End

=head2 An example of a factoring

Now for an example of a factoring.  Here's the grammar:

=for Marpa::R2::Display
name: ASF factoring dump example grammar
remove-blank-last-line: 1
remove-display-indent: 1

    :start ::= top
    top ::= b b
    b ::= a a
    b ::= a
    a ~ 'a'

=for Marpa::R2::Display::End

For the input 'aaa', a parse from this grammar must have two b's, one
short (a single 'a') and one long (two a's).  But they can be in either
order.  This is a factoring.  Here's Marpa's dump of the forest:

=for Marpa::R2::Display
name: ASF factoring dump example output
remove-blank-last-line: 1
remove-display-indent: 1

    GL2 Rule 1: top ::= b b
      Factoring #0
        GL3 Rule 3: b ::= a
          GL4 Symbol a: "a"
        GL5 Rule 2: b ::= a a
          GL6 Symbol a: "a"
          GL7 Symbol a: "a"
      Factoring #1
        GL8 Rule 2: b ::= a a
          GL9 Symbol a: "a"
          GL10 Symbol a: "a"
        GL11 Rule 3: b ::= a
          GL12 Symbol a: "a"

=for Marpa::R2::Display::End

=head1 The structure of a forest

Representing ambiguity requires new kinds of nodes,
nodes which were not necessary in an AST.
Marpa's ASF divides its nodes into three types:

=over 4

=item * Glades

Glade nodes represent tokens, as well as the individual symbols on the RHS of rules.
(The term "glade" comes from the idea of a glade as a distinct point in a forest which is
open to light.)
If a glade does not represent a token, it will have one or more symches as children.

Each glade corresponds to a unique symbol,
has a unique start location in the input,
and has a unique length in the input.
For a token, the symbol will be the token symbol.
For a rule, the symbol will be the LHS of the rule.

=item * Symches

Glades contain one or more symbolic choices, which I will call B<symches>.
Each symch is either a token or a rule.
Since symches occur within a glade, and each glade has a unique symbol,
only one of the symches in a glade can be a token symch.
There can, however, be many rule symches in a glade --
one for every rule with the glade symbol on its LHS.

Each symch contains one or more factorings.
Symches may have one or more factorings omitted.
A symch which omits factorings is said to be "truncated".
By default, at most 42 factorings are allowed in a symch.

A token symch will always have exactly one factoring.
That is because each factoring is a division
of the input among the factors.
A token is a single symbol, and therefore a token factoring
has exactly one factor.
Because the token factoring has exactly one factor,
there is only one way of dividing up the input for the
factoring, and therefore only one possible factoring.

=item * Factorings

As mentioned, a token factoring will always contain exactly one factor.
For a rule,
a factoring is a way of dividing up the span of the glade among its RHS symbols.
Every rule factoring has one or more factors.

Each "factor" is, in fact, a glade.
As a glade, each factor will have a unique symbol and
input range.
The factors immediately below a glade are called its "downglades".

=back

=head1 Constructor

=head2 new()

=head1 Forest Methods

These "forest" methods deal with the ASF as a whole,
as compared to methods with a focus on specific glades,
symches, factorings or factors.

=head2 grammar()

=head2 peak()

=head1 Glade Methods

=head2 glade_is_visited()

=head2 glade_literal()

=head2 glade_symch_count()

=head2 glade_symbol_name()

=head2 glade_visited_clear()

=head1 Symch Methods

=head2 symch_rule_id()

=head2 symch_is_truncated()

=head2 symch_factoring_count()

=head1 Factoring Methods

=head2 factoring_symbol_count()

=head1 Factor Methods

=head2 factor_downglade()

=head1 The code for the synopsis

=for Marpa::R2::Display
name: ASF low-level calls synopsis, code part 2
normalize-whitespace: 1

  our %GLADE_SEEN;    # Silence warning

  sub asf_to_basic_tree {
      my ( $asf, $glade ) = @_;
      local %GLADE_SEEN = ();
      my $peak = $asf->peak();
      return glade_to_basic_tree( $asf, $peak );
  } ## end sub asf_to_basic_tree

  sub glade_to_basic_tree {
      my ( $asf, $glade ) = @_;
      return bless ["Glade $glade revisited"], 'My_Revisit'
          if $GLADE_SEEN{$glade};
      $GLADE_SEEN{$glade} = 1;
      my $grammar     = $asf->grammar();
      my @symches     = ();
      my $symch_count = $asf->glade_symch_count($glade);
      SYMCH: for ( my $symch_ix = 0; $symch_ix < $symch_count; $symch_ix++ ) {
          my $rule_id = $asf->symch_rule_id( $glade, $symch_ix );
          if ( $rule_id < 0 ) {
              my $literal      = $asf->glade_literal($glade);
              my $symbol_id    = $asf->glade_symbol_id($glade);
              my $display_form = $grammar->symbol_display_form($symbol_id);
              push @symches,
                  bless [qq{Glade $glade, Symbol $display_form: "$literal"}],
                  'My_Token';
              next SYMCH;
          } ## end if ( $rule_id < 0 )

          # ignore any truncation of the factorings
          my $factoring_count =
              $asf->symch_factoring_count( $glade, $symch_ix );
          my @symch_description = ("Glade $glade");
          push @symch_description, "Symch $symch_ix" if $symch_count > 1;
          push @symch_description, $grammar->show_rule($rule_id);
          my $symch_description = join q{, }, @symch_description;

          my @factorings = ($symch_description);
          for (
              my $factoring_ix = 0;
              $factoring_ix < $factoring_count;
              $factoring_ix++
              )
          {
              my $downglades =
                  $asf->factoring_downglades( $glade, $symch_ix,
                  $factoring_ix );
              push @factorings,
                  map { glade_to_basic_tree( $asf, $_ ) } @{$downglades};
          } ## end for ( my $factoring_ix = 0; $factoring_ix < $factoring_count...)
          push @symches,
              bless [
              "Glade $glade, symch $symch_ix has $factoring_count factorings",
              @factorings
              ],
              'My_Factorings'
              if $factoring_count > 1;
          push @symches, bless [ @factorings[ 0, 1 ] ], 'My_Rule';
      } ## end SYMCH: for ( my $symch_ix = 0; $symch_ix < $symch_count; ...)
      return bless [ "Glade $glade has $symch_count symches", @symches ],
          'My_Symches'
          if $symch_count > 1;
      return $symches[0];
  } ## end sub glade_to_basic_tree

=for Marpa::R2::Display::End

=head1 Copyright and License

=for Marpa::R2::Display
ignore: 1

  Copyright 2013 Jeffrey Kegler
  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  Marpa::R2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::R2.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::R2::Display::End

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
