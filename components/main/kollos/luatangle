-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
--
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--
-- [ MIT license: http://www.opensource.org/licenses/mit-license.php ]

local input_filename = '-'
local default_output_filename = '-'
if #arg >= 1 then
    input_filename = arg[1]
end
if #arg >= 2 then
    default_output_filename = arg[2]
end
if input_filename == '-' then
    input_filename = nil
end

local file_ids = {}

for arg_ix = 3,#arg do
    local this_arg = arg[arg_ix]
    if not this_arg:find("=") then
        return nil, "Bad option: ", arg
    end
    local id, val = this_arg:match("^([^=]+)%=(.*)") -- no space around =
    if not id or not val then
        return nil, "Bad option: ", this_arg
    end
    file_ids[id] = val
end

local sections = {}
local outputs = {}
local current_section
local current_subsection
local current_prefix

local function form_section_name(line, words)
    local section_name_table = {}
    if words[2]:match("^!") then
        error("Section names starting in '!' are reserved\n"
           .. " Problem line: " .. line .. "\n"
        )
    end
    for word_ix = 2,#words do
        local word = words[word_ix]
        section_name_table[#section_name_table+1] = word
    end
    return table.concat(section_name_table, ' ');
end

local function section_end()
    current_section = nil
    current_subsection = nil
    -- I do not bother nil'ing the current_prefix
end

local function command_do(line)
    local prefix,command = line:match("^(%s*)--%s*luatangle:%s+(.*)$")
    if not prefix then return end
    local words = {}
    for word in command:gmatch("[^%s]+") do
        words[#words+1] = word
    end
    if words[1] == 'section' then
        local section_name = form_section_name(line, words)
        if sections[section_name] then
            error("Section '" .. current_section.name .. "' already exists\n"
                .. " Problem line: " .. line .. "\n"
            )
        end
        current_subsection = {}
        current_section = { current_subsection }
        sections[section_name] = current_section
        current_section.name = section_name
        current_subsection.prefix = prefix
        current_prefix = prefix
        return
    elseif words[1] == 'section+' then
        local section_name = form_section_name(line, words)
        current_section = sections[section_name]
        if not current_section then
            error("Section '" .. current_section.name .. "' does not exist\n"
                .. " Problem line: " .. line .. "\n"
            )
        end
        current_subsection = {}
        current_subsection.prefix = prefix
        current_prefix = prefix
        current_section[#current_section + 1] = current_subsection
        return
    elseif words[1] == 'output' then
        local section_name
        local output_fileid
        if #words == 2 then
            section_name = words[2]
        elseif #words == 3 then
            section_name = words[2]
            output_fileid = words[3]
        else
            error("Malformed output command\n"
                .. " Problem line: " .. line .. "\n"
            )
        end
        local output_section = sections[section_name]
        if not output_section then
            error("output command to non-existent section\n"
                .. " Problem line: " .. line .. "\n"
            )
        end
        if outputs[section_name] then
            error("duplicate output command\n"
                .. " Second command is: " .. line .. "\n"
            )
        end
        local output_filename
        if output_fileid then
            output_filename
                = file_ids[output_fileid] or output_fileid
        else output_filename = default_output_filename
        end 
        outputs[section_name] = output_filename
        return
    end

    if not current_section then
        error("Section command found, but it is not in a section\n"
            .. " Problem line: " .. line .. "\n"
        )
    end
    if #words == 2 and words[1] == 'end' and words[2] == 'section' then
        section_end()
        return
    else
        error("Unknown command: " .. line .. "\n")
    end
end

for line in io.lines(input_filename) do
    if current_subsection then
        local line_prefix = line:sub(1,#current_prefix)
        if line_prefix == current_prefix
        then
            command_do(line)
        elseif line_prefix:match("^[^%s]") then
            section_end()
        elseif #line ~= 0 then
            error("Section '" .. current_subsection.name .. "' ends in bad line\n"
                .. " Problem line: " .. line .. "\n"
            )
        end
    else
        command_do(line)
    end
    -- A command may have ended or started a subsection
    if current_subsection then
    current_subsection[#current_subsection+1] = line
    end
end

local was_output
for section_name,output_filename in pairs(outputs) do
    was_output = true
    local section = sections[section_name]
    local handle
    if output_filename == '-' then
        handle = io.output()
    else
        local error_message
        handle,error_message = io.open(output_filename, 'w')
        if not handle then error(error_message) end
    end
    for subsection_ix = 1,#section do
        local subsection = section[subsection_ix]
        local prefix = subsection.prefix
        for line_ix = 1,#subsection do
            local line = subsection[line_ix]:sub(#prefix+1)
            handle:write(line, '\n')
        end
    end
end

if not was_output then
    error("No output commands: there must be at least one\n")
end

-- vim: expandtab shiftwidth=4:
