-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
--
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--
-- [ MIT license: http://www.opensource.org/licenses/mit-license.php ]

local input_file_name = arg[1]
local ids = {}

for arg_ix = 2,#arg do
    this_arg = arg[arg_ix]
    if not this_arg:find("=") then
        return nil, "Bad option: ", arg
    end
    local id, val = this_arg:match("^([^=]+)%=(.*)") -- no space around =
    if not id or not val then
        return nil, "Bad option: ", this_arg
    end
    ids[id] = val
end

local sections = {}
local current_section
local current_prefix

local form_section_name(line, words)
    local section_name_table = {}
    if words[2]:match("^!") then
        error("Section names starting in '!' are reserved\n"
           .. " Problem line: " .. line .. "\n"
        )
    end
    for word_ix = 2,#words do
        local word = words[word_ix]
        section_name_table[#section_name_table+1] = words[word_ix]
    end
    local section_name = table.concat(section_name_table, ' ');
end

local function command_do(command)
    local words = command:gmatch("[^%s]+")
    if words[1] == 'section' then
        local section_name = form_section_name(line, words)
        current_section = {}
        if sections[section_name] then
            error("Section '" .. current_section.name .. "' already exists\n"
                .. " Problem line: " .. line .. "\n"
        )
        end
        sections[section_name] = current_section
        current_section.name = section_name
        current_section.prefix = current_prefix
        return
    elseif words[1] == 'section+' then
        local section_name = form_section_name(line, words)
        current_section = sections[section_name]
        if not current_section then
            error("Section '" .. current_section.name .. "' does not exist\n"
                .. " Problem line: " .. line .. "\n"
            )
        end
        current_prefix = current_section.prefix
        return
    end
    if not current_section then
        error("Section command found, but it is not in a section\n"
            .. " Problem line: " .. line .. "\n"
        )
    end
    if #words == 2 and words[1] == 'end' and words[2] = 'section' then
        current_section = nil
	return
    end
end

for line in io.lines(input_file_name) do
    if current_section then
        local end_section
        if line:sub(1,#current_prefix) == current_prefix
        then
            current_section[#current_section+1] = line
            local tangle_command = line:sub(#current_prefix):match("^--[%s]+luatangle:[%s]+(.*)$")
            if tangle_command then
                command_do(tangle_command)
            end
        elseif #line == 0 then
            current_section[#current_section+1] = line
        elseif line:match("^[^%s]") then
            current_section = nil
        else
            error("Section '" .. current_section.name .. "' ends in bad line\n"
                .. " Problem line: " .. line .. "\n"
            )
        end
    else
        local tangle_command = line:sub(#current_prefix):match("^--[%s]+luatangle:[%s]+(.*)$")
        if tangle_command then
            command_do(tangle_command)
        end
    end
end

-- vim: expandtab shiftwidth=4:
