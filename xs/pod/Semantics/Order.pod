# Copyright 2011 Jeffrey Kegler
# This file is part of Marpa::XS.  Marpa::XS is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::XS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::XS.  If not, see
# http://www.gnu.org/licenses/.

=head1 NAME

Marpa::XS::Semantics::Order - How Marpa Ranks Ambiguous Parses

=head1 DESCRIPTION

This document details the order in which
the recognizer's
L<C<value>|Marpa::XS::Recognizer/"value">
method
returns parse results.
The same mechanism allows the selection of parse results.
It can also be exploited to do the actual processing
of parses, using side effects.

=head2 Duplicate parses are eliminated

In a single parse series,
Marpa will never return the same parse result twice.
Marpa regards two parses as being the same if they are
B<semantic duplicates>.

Two parses are semantic duplicates if
a recursive, top-down evaluation of each
applies
the same rules
in the same order
at the same earleme locations.
When this is the case,
a deterministic semantics will
always produce the same value for both parses --
hence the term "semantic duplicate".
When the Marpa documentation refers to duplicate
parses, it will mean semantic duplicates unless otherwise
stated.

=head2 Default parse order

By calling
the recognizer's
L<C<value>|Marpa::XS::Recognizer/"value">
method
repeatedly,
Marpa can produce all the parse results
for a given parse.
The default is for the parse results to be returned
in an arbitrary order.
This corresponds to the "C<none>" value of
L<the recognizer's C<ranking_method>|Marpa::XS::Recognizer/"ranking_method">
named argument.

=head2 Arbitrary parse order

As the term is used in the Marpa documents,
"arbitrary parse order" means that no property of
the order, except avoidance of duplicates,
can be relied on by an application.
In particular, where the parse order is arbitrary,
it may change from version to version of the software,
or from parse to parse with the same version.

For an application which is indifferent to the order
of parses,
arbitrary parse order is acceptable.
For example,
an application which collects all the parses and sorts them
itself will not care about the order in which it received the
parses.
Application writers should be careful that their applications
are truly indifferent to an arbitrary parse order,
and not just relying on its current, unguaranteed, properties.

=head2 Ranking methods

Marpa Grammar objects have L<a C<ranking_method> named
argument|Marpa::XS::Recognizer/"ranking_method">,
whose value can be the name of a ranking method,
or "C<none>", indicating that the default ranking method is to
be used.

=head2 The C<rule> ranking method

The rule method ranks alternative parses according to their rules.
Every rule has a B<rule rank>.
A rule's rank can be specified using the 
the C<rank> named
argument for that rule.
Rule ranks must be integers.
If no rule rank is specified, the rule rank is 0.

Ranking using the C<rule> ranking method
takes place in top-down, left-to-right order.

=head2 Null ranking

Some rules have a RHS which contains
B<proper nullables>, symbols
which may be nulled, but which are not nulling
symbols.
(Nulling symbols are those which are B<always> nulled.)

Where a rule contains proper nullables, each application
of that rule to a section of input creates a pattern of
symbols which are and are not nulled.
In many cases, this creates an ambiguity -- several
patterns could apply to the same input substring.
In ambiguous parsings of this kind,
some applications may want the ranking to prefer non-null symbols.
Others may want to the parse order to rank nulled symbols higher.

Call an B<input substring> a section of a parse's input with
a fixed beginning and end.
An input substring can be thought of either as a string or
as a sequence of tokens, whichever is convenient.
If a parse is ambiguious,
a single rule can match an
input substring in several ways.
One source of this kind of ambiguity is the pattern
of nulled and non-nulled symbols.
For a particular rule,
call a pattern of nulled and non-nulled symbols
a B<nulling variant> of that rule.

Nulling variants are ranking by preferring nulled or
non-nulled symbols in left-to-right order.
The 
L<C<null_ranking> named
argument for rules|Marpa::XS::Grammar/"null_ranking">
specifies whether nulled or non-nulled symbols are preferred.
If the C<null_ranking> is "C<low>", nulled symbols are
ranked low, so that non-nulled symbols are preferred.
If the C<null_ranking> is "C<high>", nulled symbols are
ranked high, so that they are preferred.

By default, 
C<null_ranking> is undefined, which means the order
of the null variants is arbitrary.
This will be acceptable to most applications.

=head3 Details of rule comparison

Call a rule B<null ranked> if and only if it has one or more proper
nullables on its RHS, and its C<null_ranking> is defined.
Note that this definition implies that a rule without proper nullables
will is NOT null ranked, even if a C<null_ranking> was explicitly
specified for it.

If only one rule is involved and it is null ranked,
rule variants are ordered based on null ranking as described above.
If only one rule is involved and it is non-null-ranked,
the ranking of the rule applications is arbitrary.

Where rules with different rule ranks are involved,
the rule ranks take priority.
Null ranking are never taken into consideration when
comparing rules of different rule ranks.

If rules with the same rule rank are compared,
but none of them are null ranked,
their order is arbitrary.

The rest of this section
deals with rule comparisons where more than one
rule is involved, all the rules have the same rank
and at least one of the rules is null ranked.

The guiding principle is as follows:
A non-null-ranked rule will NEVER be outranked by
a null ranked rule.  A null ranked rule variant, at best,
ranks the same as a non-null-ranked rule.

When comparing null variants between different null ranked
rules, the relative ranking of the null variants is arbitrary.
All an application can rely on about the order of the rule variants
is that it will preserve relative order of the variants within
each null ranked rule.

In particular, it is arbitrary whether all the null
variants of one null ranked rule outrank all of those of another,
whether they are interleaved,
and whether in the interleaving some null variants rank equal
to others.
An application, if it requires non-arbitrary behavior in comparisons
of null variants between rules, should
rewrite its grammar or
use rule ranks
to guarantee the required behavior.

For each null ranked rule,
exactly one null variant has the highest null ranking of the rule
In each rule comparison involving a null ranked rule,
a least one null variant has the highest null ranking of
the rule comparison.
If there are I<N> null ranked rules in the comparison,
there will be from 1 to I<N> null variants with the highest null ranking.
Exactly how many there are, and which rules they represent,
is arbitrary.

Whenever a non-null-ranked rule is compared to a null ranked
rule (again, assuming both have the same rule rank),
the non-null-ranked rule is treated as having the highest
null ranking of the comparison.
As a consequence, the null ranked rule
may compare equal to the non-null-ranked rule,
but it will never outrank it.

=head2 A general approach to sorting parses

The most general way to sort Marpa parses is for the application
to take control.
The application can set up the Marpa semantic actions
so that the value of every parse result is a
C<< <rank, true_value> >> duple.
The duples can then be sorted by C<rank>.
Once the resuls are sorted,
the C<rank> element of the duple can be discarded.
(Those familiar with the Schwartzian transform
may note a resemblance.
In Perl,
duples can be implemented as references to arrays of 2 elements.)

The user needs to be careful.
In theory, ambiguity can cause an exponential explosion in the number of results.
In practice, ambiguity tends to get out of hand very easily.
Producing and sorting all the parses can take a very
long time.

=head2 The C<constant> ranking method is not longer supported

In the past,
Marpa supported a approach to sorting parses,
called the Constant Ranking Method.
An initial attempt to find the sweet spot
between flexibity and efficiency,
the Constant Ranking Method was a design failure,
and is no longer implemented.

=head1 COPYRIGHT AND LICENSE

=for Marpa::XS::Display
ignore: 1

  Copyright 2011 Jeffrey Kegler
  This file is part of Marpa::XS.  Marpa::XS is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.
  
  Marpa::XS is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::XS.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::XS::Display::End

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
